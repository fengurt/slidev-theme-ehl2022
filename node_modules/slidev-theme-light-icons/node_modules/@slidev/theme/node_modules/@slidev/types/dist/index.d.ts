import { Awaitable } from '@antfu/utils';
import { IThemeRegistration, ILanguageRegistration, Highlighter } from 'shiki';
import * as monaco from 'monaco-editor';
import { App } from 'vue';
import { Router } from 'vue-router';
import mermaid from 'mermaid';
import { KatexOptions } from 'katex';

interface SlideInfo {
    index: number;
    start: number;
    end: number;
    raw: string;
    content: string;
    note?: string;
    frontmatter: Record<string, any>;
    title?: string;
}
interface SlideInfoExtended extends SlideInfo {
    notesHTML: string;
}
declare type SlidevThemeConfig = Record<string, string | number>;
interface SlidevConfig {
    title: string;
    /**
     * @see https://sli.dev/themes/use.html
     * @defult 'default'
     */
    theme: string;
    /**
     * @defult true
     */
    remoteAssets: boolean | 'dev' | 'build';
    /**
     * Enable Monaco
     *
     * @see https://sli.dev/custom/config-monaco.html
     * @defult 'dev'
     */
    monaco: boolean | 'dev' | 'build';
    /**
     * Show a download button in the SPA build,
     * could also be a link to custom pdf
     *
     * @default true
     */
    download: boolean | string;
    /**
     * Information shows on the built SPA
     * Can be a markdown string
     *
     * @default true
     */
    info: string | boolean;
    /**
     * Prefer highlighter
     *
     * @see https://sli.dev/custom/highlighters.html
     * @default prism
     */
    highlighter: 'prism' | 'shiki';
    /**
     * Force slides color schema
     *
     * @default 'auto'
     */
    colorSchema: 'dark' | 'light' | 'all' | 'auto';
    /**
     * Router mode for vue-router
     *
     * @default 'hash'
     */
    routerMode: 'hash' | 'history';
    /**
     * Aspect ratio for slides
     * should be like `16/9` or `1:1`
     *
     * @default '16/9'
     */
    aspectRatio: number;
    /**
     * The actual width fro slides canvas.
     * unit in px.
     *
     * @default '980'
     */
    canvasWidth: number;
    /**
     * Configure for themes, will inject intro root styles as
     * `--slidev-theme-x` for attribute `x`
     *
     * This allows themes to have customization options in frontmatter
     * Refer to themes' document for options avaliable
     *
     * @default {}
     */
    themeConfig: SlidevThemeConfig;
}
interface SlidevFeatureFlags {
    katex: boolean;
    monaco: boolean;
    tweet: boolean;
    mermaid: boolean;
}
interface SlidevMarkdown {
    filepath?: string;
    slides: SlideInfo[];
    raw: string;
    config: SlidevConfig;
    features: SlidevFeatureFlags;
    headmatter: Record<string, unknown>;
}

interface AppContext {
    app: App;
    router: Router;
}
interface ShikiDarkModeThemes {
    dark: IThemeRegistration;
    light: IThemeRegistration;
}
interface ShikiOptions {
    theme?: IThemeRegistration | ShikiDarkModeThemes;
    langs?: ILanguageRegistration[];
    highlighter?: Highlighter;
}
declare type MermaidOptions = (typeof mermaid.initialize) extends (a: infer A) => any ? A : never;
declare type ShikiSetup = () => Awaitable<ShikiOptions | undefined>;
declare type KatexSetup = () => Awaitable<Partial<KatexOptions> | undefined>;
declare type MonacoSetup = (m: typeof monaco) => Awaitable<void>;
declare type AppSetup = (context: AppContext) => Awaitable<void>;
declare type MermaidSetup = () => Partial<MermaidOptions> | undefined;
declare function defineShikiSetup(fn: ShikiSetup): ShikiSetup;
declare function defineMonacoSetup(fn: MonacoSetup): MonacoSetup;
declare function defineAppSetup(fn: AppSetup): AppSetup;
declare function defineMermaidSetup(fn: MermaidSetup): MermaidSetup;
declare function defineKatexSetup(fn: KatexSetup): KatexSetup;

export { AppContext, AppSetup, KatexSetup, MermaidOptions, MermaidSetup, MonacoSetup, ShikiDarkModeThemes, ShikiOptions, ShikiSetup, SlideInfo, SlideInfoExtended, SlidevConfig, SlidevFeatureFlags, SlidevMarkdown, SlidevThemeConfig, defineAppSetup, defineKatexSetup, defineMermaidSetup, defineMonacoSetup, defineShikiSetup };
